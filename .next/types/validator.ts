// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}




// Validate ..\..\src\app\api\auth\[...nextauth]\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\auth\\[...nextauth]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/[...nextauth]">
}

// Validate ..\..\src\app\api\auth\register\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\auth\\register\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/register">
}

// Validate ..\..\src\app\api\bookings\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\bookings\\route.js")
  handler satisfies RouteHandlerConfig<"/api/bookings">
}

// Validate ..\..\src\app\api\documentation\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\documentation\\route.js")
  handler satisfies RouteHandlerConfig<"/api/documentation">
}

// Validate ..\..\src\app\api\equipment\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\equipment\\route.js")
  handler satisfies RouteHandlerConfig<"/api/equipment">
}

// Validate ..\..\src\app\api\events\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\events\\route.js")
  handler satisfies RouteHandlerConfig<"/api/events">
}

// Validate ..\..\src\app\api\facilities\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\facilities\\route.js")
  handler satisfies RouteHandlerConfig<"/api/facilities">
}

// Validate ..\..\src\app\api\journals\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\journals\\route.js")
  handler satisfies RouteHandlerConfig<"/api/journals">
}

// Validate ..\..\src\app\api\payments\callback\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\payments\\callback\\route.js")
  handler satisfies RouteHandlerConfig<"/api/payments/callback">
}

// Validate ..\..\src\app\api\payments\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\payments\\route.js")
  handler satisfies RouteHandlerConfig<"/api/payments">
}





// Validate ..\..\src\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
