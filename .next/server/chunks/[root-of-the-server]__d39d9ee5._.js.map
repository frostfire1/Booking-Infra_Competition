{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///home/thr00n3r/Documents/CodingProject/JHIC-2025/Booking-Infra_Competition/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///home/thr00n3r/Documents/CodingProject/JHIC-2025/Booking-Infra_Competition/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { NextRequest } from \"next/server\";\nimport { prisma } from \"@/lib/prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { name, email, password } = await request.json();\n\n    // Validation\n    if (!name || !email || !password) {\n      return NextResponse.json(\n        { message: \"Semua field harus diisi\" },\n        { status: 400 }\n      );\n    }\n\n    if (password.length < 6) {\n      return NextResponse.json(\n        { message: \"Password minimal 6 karakter\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      return NextResponse.json(\n        { message: \"Email sudah terdaftar\" },\n        { status: 400 }\n      );\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create user\n    const user = await prisma.user.create({\n      data: {\n        name,\n        email,\n        password: hashedPassword,\n        emailVerified: new Date(), // Auto verify for now\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        role: true,\n        createdAt: true,\n      },\n    });\n\n    return NextResponse.json(\n      {\n        success: true,\n        message: \"Registrasi berhasil\",\n        user,\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    return NextResponse.json(\n      { message: \"Terjadi kesalahan saat registrasi\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpD,aAAa;QACb,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,8NAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA0B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,OAAO,8NAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA8B,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,8MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,OAAO,8NAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAwB,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,4NAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,cAAc;QACd,MAAM,OAAO,MAAM,8MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ;gBACA;gBACA,UAAU;gBACV,eAAe,IAAI;YACrB;YACA,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,MAAM;gBACN,WAAW;YACb;QACF;QAEA,OAAO,8NAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;YACT;QACF,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,8NAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAoC,GAC/C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}