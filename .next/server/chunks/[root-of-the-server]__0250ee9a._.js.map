{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///home/thr00n3r/Documents/CodingProject/JHIC-2025/Booking-Infra_Competition/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file:///home/thr00n3r/Documents/CodingProject/JHIC-2025/Booking-Infra_Competition/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\nimport { prisma } from \"@/lib/prisma\"\nimport type { Adapter } from \"next-auth/adapters\"\nimport bcrypt from \"bcryptjs\"\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as Adapter,\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"Email dan password harus diisi\");\n        }\n\n        const user = await prisma.user.findUnique({\n          where: { email: credentials.email },\n        });\n\n        if (!user) {\n          throw new Error(\"USER_NOT_FOUND\");\n        }\n\n        if (!user.password) {\n          throw new Error(\"Gunakan Google untuk login\");\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password\n        );\n\n        if (!isPasswordValid) {\n          throw new Error(\"Password salah\");\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          image: user.image,\n          role: user.role,\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.role = user.role;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session?.user && token) {\n        session.user.id = token.id as string;\n        session.user.role = (token.role as \"USER\" | \"ADMIN\") || \"USER\";\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: '/auth',\n  },\n  session: {\n    strategy: \"jwt\",\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AAEA;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,IAAA,qPAAa,EAAC,8MAAM;IAC7B,WAAW;QACT,IAAA,8OAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,IAAA,mPAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,OAAO,MAAM,8MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACpC;gBAEA,IAAI,CAAC,MAAM;oBACT,MAAM,IAAI,MAAM;gBAClB;gBAEA,IAAI,CAAC,KAAK,QAAQ,EAAE;oBAClB,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,kBAAkB,MAAM,4NAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,MAAM,IAAI,MAAM;gBAClB;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,OAAO;gBAC1B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,AAAC,MAAM,IAAI,IAAyB;YAC1D;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,SAAS;QACP,UAAU;IACZ;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///home/thr00n3r/Documents/CodingProject/JHIC-2025/Booking-Infra_Competition/src/app/api/bookings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from '@/lib/auth'\n\n// GET all bookings\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const facilityId = searchParams.get('facilityId')\n    const startDate = searchParams.get('startDate')\n    const endDate = searchParams.get('endDate')\n\n    const where: {\n      facilityId?: string\n      OR?: Array<{\n        startDate: { lte: Date }\n        endDate: { gte: Date }\n      }>\n    } = {}\n    \n    if (facilityId) {\n      where.facilityId = facilityId\n    }\n    \n    if (startDate && endDate) {\n      where.OR = [\n        {\n          startDate: {\n            lte: new Date(endDate),\n          },\n          endDate: {\n            gte: new Date(startDate),\n          },\n        },\n      ]\n    }\n\n    const bookings = await prisma.booking.findMany({\n      where,\n      include: {\n        facility: true,\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        equipment: {\n          include: {\n            equipment: true,\n          },\n        },\n      },\n      orderBy: {\n        startDate: 'asc',\n      },\n    })\n\n    return NextResponse.json(bookings)\n  } catch (error) {\n    console.error('Error fetching bookings:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch bookings' },\n      { status: 500 }\n    )\n  }\n}\n\n// POST create new booking\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    const body = await request.json()\n    const { facilityId, title, description, startDate, endDate, equipment } = body\n\n    // Validate required fields\n    if (!facilityId || !title || !startDate || !endDate) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 }\n      )\n    }\n\n    // Check for overlapping bookings\n    const overlappingBooking = await prisma.booking.findFirst({\n      where: {\n        facilityId,\n        status: {\n          in: ['PENDING', 'APPROVED'],\n        },\n        OR: [\n          {\n            startDate: {\n              lte: new Date(endDate),\n            },\n            endDate: {\n              gte: new Date(startDate),\n            },\n          },\n        ],\n      },\n    })\n\n    if (overlappingBooking) {\n      return NextResponse.json(\n        { error: 'Facility is already booked for the selected dates' },\n        { status: 409 }\n      )\n    }\n\n    // Create booking with equipment\n    const booking = await prisma.booking.create({\n      data: {\n        facilityId,\n        userId: session.user.id,\n        title,\n        description,\n        startDate: new Date(startDate),\n        endDate: new Date(endDate),\n        equipment: equipment ? {\n          create: equipment.map((item: { equipmentId: string; quantity: number }) => ({\n            equipmentId: item.equipmentId,\n            quantity: item.quantity,\n          })),\n        } : undefined,\n      },\n      include: {\n        facility: true,\n        equipment: {\n          include: {\n            equipment: true,\n          },\n        },\n      },\n    })\n\n    return NextResponse.json(booking, { status: 201 })\n  } catch (error) {\n    console.error('Error creating booking:', error)\n    return NextResponse.json(\n      { error: 'Failed to create booking' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}