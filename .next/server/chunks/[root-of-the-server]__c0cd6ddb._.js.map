{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///home/thr00n3r/Documents/CodingProject/JHIC-2025/Booking-Infra_Competition/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/thr00n3r/Documents/CodingProject/JHIC-2025/Booking-Infra_Competition/src/app/api/equipment/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport async function GET() {\n  try {\n    const equipment = await prisma.equipment.findMany({\n      orderBy: {\n        name: 'asc',\n      },\n    })\n\n    return NextResponse.json(equipment)\n  } catch (error) {\n    console.error('Error fetching equipment:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch equipment' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,YAAY,MAAM,8MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;YAChD,SAAS;gBACP,MAAM;YACR;QACF;QAEA,OAAO,8NAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,8NAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}