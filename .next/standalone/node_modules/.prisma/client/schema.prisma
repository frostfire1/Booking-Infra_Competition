// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole        @default(USER)
  accounts      Account[]
  bookings      Booking[]
  journals      Journal[]
  documentation Documentation[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Facility {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  capacity    Int?
  image       String?
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Equipment {
  id        String             @id @default(cuid())
  name      String
  quantity  Int
  available Int
  image     String?
  bookings  BookingEquipment[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Booking {
  id            String             @id @default(cuid())
  facilityId    String
  facility      Facility           @relation(fields: [facilityId], references: [id])
  userId        String
  user          User               @relation(fields: [userId], references: [id])
  title         String
  description   String?            @db.Text
  startDate     DateTime
  endDate       DateTime
  status        BookingStatus      @default(PENDING)
  totalPrice    Decimal            @default(0) @db.Decimal(10, 2)
  equipment     BookingEquipment[]
  payment       Payment?
  journals      Journal[]
  documentation Documentation[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([facilityId])
  @@index([userId])
  @@index([startDate, endDate])
}

model BookingEquipment {
  id          String    @id @default(cuid())
  bookingId   String
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  quantity    Int
  createdAt   DateTime  @default(now())

  @@unique([bookingId, equipmentId])
  @@index([bookingId])
  @@index([equipmentId])
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String        @unique
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount          Decimal       @db.Decimal(10, 2)
  paymentMethod   String        @db.VarChar(50)
  paymentChannel  String?       @db.VarChar(50)
  reference       String        @unique @db.VarChar(100)
  merchantRef     String        @unique @db.VarChar(100)
  tripayReference String?       @unique @db.VarChar(100)
  status          PaymentStatus @default(UNPAID)
  paidAt          DateTime?
  expiredAt       DateTime?
  checkoutUrl     String?       @db.Text
  qrCode          String?       @db.Text
  instructions    Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([reference])
  @@index([merchantRef])
  @@index([status])
}

model Journal {
  id           String   @id @default(cuid())
  bookingId    String
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  activityDate DateTime
  content      String   @db.Text
  participants String?  @db.Text
  notes        String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([bookingId])
  @@index([userId])
  @@index([activityDate])
}

model Documentation {
  id           String   @id @default(cuid())
  bookingId    String
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  title        String
  description  String?  @db.Text
  documentType String   @db.VarChar(50) // photo, video, document, report
  fileUrl      String   @db.Text
  fileName     String
  fileSize     Int
  mimeType     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([bookingId])
  @@index([userId])
  @@index([documentType])
}

enum UserRole {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
  EXPIRED
  REFUNDED
}
